{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Bar}from'react-chartjs-2';import{translations}from\"../../translations\";import{Chart as ChartJS,CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend}from'chart.js';import{UserContext}from'../UserContext';import{LoadingPage}from\"../LoadingPage\";import{ThemeContext}from\"@emotion/react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend);const WorkHoursDashboard=()=>{const settings=React.useContext(UserContext);const theme=React.useContext(ThemeContext);const[workHoursData,setWorkHoursData]=useState([]);const[targetDailyHours]=useState(8);// Sollstunden pro Tag\nconst[targetWeeklyHours]=useState(40);// Sollstunden pro Woche\nconst[weeklySummary,setWeeklySummary]=useState([]);const[expandedWeek,setExpandedWeek]=useState(null);// Aktuell geöffnete Woche\nconst[totalHoursDiff,setTotalHoursDiff]=useState(0);// Gesamtdifferenz\nconst[isLoading,setIsLoading]=useState(false);useEffect(()=>{setIsLoading(true);const fetchWorkHours=async()=>{try{const employeeId=settings.userID;// Replace with dynamically retrieved connected employee ID\nconst response=await fetch(\"/api/workhours/\".concat(employeeId));const data=await response.json();setWorkHoursData(data);// Save data for rendering the chart\ncalculateWeeklySummary(data,targetWeeklyHours);// Calculate weekly summary\ncalculateTotalHoursDiff(data,targetDailyHours);// Update total hours difference\n// setTotalHoursDiff(data.reduce((a,b) => a + b.tagessaldo, 0)); // Calculate total hours difference\n}catch(error){console.error(\"Error fetching work hours:\",error);}};fetchWorkHours().then(r=>setIsLoading(false));},[settings.userID,targetDailyHours,targetWeeklyHours]);const calculateTotalHoursDiff=(data,targetDailyHours)=>{let totalDifference=0;// Start with zero for total hours difference\ndata.forEach(entry=>{const hoursWorked=entry.hours;// Hours worked for the day\nconst dayOfWeek=entry.day;// Day of the week (e.g., \"Montag\")\n// Determine target hours for the day\nconst isWeekend=dayOfWeek==='Samstag'||dayOfWeek==='Sonntag';const dailyTarget=isWeekend?0:targetDailyHours;// 0 target hours for weekends\n// Calculate difference for the day\nconst dailyDifference=hoursWorked-dailyTarget;// Accumulate total difference\ntotalDifference+=dailyDifference;});// Update state with the total hours difference\nsetTotalHoursDiff(totalDifference);};const calculateWeeklySummary=(data,targetWeeklyHours)=>{const weeks=[];let currentWeek=[];let startOfWeek=null;data.forEach(entry=>{const date=new Date(entry.date.split('.').reverse().join('-'));// Parse DD.MM.YYYY\nconst dayOfWeek=date.getDay();// 0 = Sunday, 1 = Monday, ..., 6 = Saturday\nif(dayOfWeek===1||!startOfWeek){// Start a new week\nif(currentWeek.length>0){const totalHours=currentWeek.reduce((sum,hours)=>sum+hours.hours,0);const difference=totalHours-targetWeeklyHours;const percentage=(totalHours/targetWeeklyHours*100).toFixed(2);weeks.push({weekNumber:weeks.length,totalHours,difference,percentage,startDate:startOfWeek,endDate:currentWeek[currentWeek.length-1].date,feedback:totalHours===targetWeeklyHours?translations[settings.language].perfectHour:totalHours>targetWeeklyHours?translations[settings.language].overtime:translations[settings.language].underHours});}// Reset for the next week\nstartOfWeek=entry.date;currentWeek=[];}currentWeek.push(entry);// Add the last week if at the end of data\nif(entry.date===data[data.length-1].date&&currentWeek.length>0){const totalHours=currentWeek.reduce((sum,hours)=>sum+hours.hours,0);const difference=totalHours-targetWeeklyHours;const percentage=(totalHours/targetWeeklyHours*100).toFixed(2);weeks.push({weekNumber:weeks.length,totalHours,difference,percentage,startDate:startOfWeek,endDate:currentWeek[currentWeek.length-1].date,feedback:totalHours===targetWeeklyHours?translations[settings.language].perfectHour:totalHours>targetWeeklyHours?'Überstunden gemacht.':'Weniger als Sollarbeitsstunden gearbeitet.'});}});setWeeklySummary(weeks.slice(-4));};// // Berechnung der wöchentlichen Zusammenfassung (Montag - Sonntag)\n// const calculateWeeklySummaryold = (data, targetWeeklyHours) => {\n//   const weeks = [];\n//   let currentWeek = [];\n//   let startOfWeek = null;\n//\n//   data.forEach((entry) => {\n//     const date = new Date(entry.date);\n//     const dayOfWeek = date.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n//\n//     if (dayOfWeek === 1 || !startOfWeek) {\n//       // Start a new week\n//       if (currentWeek.length > 0) {\n//         const totalHours = currentWeek.reduce((sum, hours) => sum + hours.hours, 0);\n//         const difference = totalHours - targetWeeklyHours;\n//         const percentage = ((totalHours / targetWeeklyHours) * 100).toFixed(2);\n//\n//         weeks.push({\n//           weekNumber: weeks.length + 1,\n//           totalHours,\n//           difference,\n//           percentage,\n//           startDate: startOfWeek,\n//           endDate: currentWeek[currentWeek.length - 1].date,\n//           feedback:\n//             totalHours === targetWeeklyHours\n//               ? 'Perfekte Arbeitsstunden!'\n//               : totalHours > targetWeeklyHours\n//               ? 'Überstunden gemacht.'\n//               : 'Weniger als Sollarbeitsstunden gearbeitet.',\n//         });\n//       }\n//\n//       // Reset for the next week\n//       startOfWeek = entry.date;\n//       currentWeek = [];\n//     }\n//\n//     currentWeek.push(entry);\n//\n//     // Add the last week if at the end of data\n//     if (entry.date === data[data.length - 1].date && currentWeek.length > 0) {\n//       const totalHours = currentWeek.reduce((sum, hours) => sum + hours.hours, 0);\n//       const difference = totalHours - targetWeeklyHours;\n//       const percentage = ((totalHours / targetWeeklyHours) * 100).toFixed(2);\n//\n//       weeks.push({\n//         weekNumber: weeks.length + 1,\n//         totalHours,\n//         difference,\n//         percentage,\n//         startDate: startOfWeek,\n//         endDate: currentWeek[currentWeek.length - 1].date,\n//         feedback:\n//           totalHours === targetWeeklyHours\n//             ? 'Perfekte Arbeitsstunden!'\n//             : totalHours > targetWeeklyHours\n//             ? 'Überstunden gemacht.'\n//             : 'Weniger als Sollarbeitsstunden gearbeitet.',\n//       });\n//     }\n//   });\n//\n//   // Limit to the last 4 weeks\n//   setWeeklySummary(weeks.slice(-4));\n// };\nconst handleToggleWeek=weekIndex=>{setExpandedWeek(expandedWeek===weekIndex?null:weekIndex);// Klappen/Entklappen\n};// // Daten für das Balkendiagramm\n// const generateDatasets = (data) => {\n//   const barColors = data.map((entry) =>\n//     entry.hours >= 8 ? 'green' : entry.hours > 0 ? 'orange' : 'gray'\n//   );\n//\n//   return [\n//     {\n//       label: translations[settings.language].workingHours,\n//       data: data.map((entry) => entry.hours),\n//       backgroundColor: barColors,\n//       borderColor: barColors,\n//       borderWidth: 1,\n//     },\n//   ];\n// };\n// const graphData = {\n//   labels: workHoursData.map((entry) => entry.date),\n//   datasets: generateDatasets(workHoursData),\n// };\nconst graphData={labels:workHoursData.map(entry=>entry.date),datasets:[{label:'Work Hours',data:workHoursData.map(entry=>entry.hours),backgroundColor:workHoursData.map(entry=>entry.hours<=8.25&entry.hours>=7.75?'green':entry.hours>8.25&entry.hours<=10?'orange':entry.hours<7.75?'orange':entry.hours>10?'red':'gray'),borderColor:workHoursData.map(entry=>entry.hours<=8.25&entry.hours>=7.75?'green':entry.hours<7.75?'orange':entry.hours>10?'red':'gray'),borderWidth:1}]};const graphOptions={responsive:true,maintainAspectRatio:false,plugins:{legend:false},scales:{y:{beginAtZero:true,title:{display:true,text:translations[settings.language].workingHours}},x:{title:{display:true,text:translations[settings.language].legend}}}};return isLoading?/*#__PURE__*/_jsx(LoadingPage,{}):/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',fontFamily:'Arial, sans-serif',lineHeight:'1.5'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'20px',padding:'10px',border:'1px solidrgb(0, 255, 183)',borderRadius:'5px',color:theme.palette.primary.contrastText,backgroundColor:theme.palette.primary.main},children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontWeight:'bold',fontSize:'1.2em'},children:[translations[settings.language].overallHours,\":\"]}),/*#__PURE__*/_jsxs(\"span\",{style:{color:theme.palette.primary.contrastText},children:[totalHoursDiff>0?\"+\".concat(totalHoursDiff):totalHoursDiff,\" \",translations[settings.language].hours]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'30px'},children:[/*#__PURE__*/_jsx(\"h2\",{children:translations[settings.language].descBarChart}),/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',height:'400px'},children:/*#__PURE__*/_jsx(Bar,{data:graphData,options:graphOptions})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px'},children:[/*#__PURE__*/_jsxs(\"strong\",{children:[translations[settings.language].legend,\":\"]}),/*#__PURE__*/_jsxs(\"ul\",{style:{textAlign:'left'},children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'green',fontWeight:'bold'},children:\"\\u25A0\"}),\" \",translations[settings.language].perfectHour]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'orange',fontWeight:'bold'},children:\"\\u25A0\"}),\" \",translations[settings.language].nonstandardHour]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'red',fontWeight:'bold'},children:\"\\u25A0\"}),\" \",translations[settings.language].overHour]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'gray',fontWeight:'bold'},children:\"\\u25A0\"}),\" \",translations[settings.language].weekend]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'50px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:translations[settings.language].weeklyOverview}),weeklySummary.map((week,index)=>{const isExpanded=expandedWeek===index;return/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'15px'},children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleToggleWeek(index),style:{display:'block',width:'100%',padding:'10px',backgroundColor:theme.palette.secondary.main,color:theme.palette.secondary.contrastText,border:'none',borderRadius:'5px',cursor:'pointer',textAlign:'left'},children:isExpanded?\"\".concat(translations[settings.language].week,\" \").concat(week.weekNumber,\" (\").concat(week.startDate,\" - \").concat(week.endDate,\")  \").concat(translations[settings.language].hide):\"\".concat(translations[settings.language].week,\" \").concat(week.weekNumber,\" (\").concat(week.startDate,\" - \").concat(week.endDate,\")  \").concat(translations[settings.language].display)}),isExpanded&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px',padding:'10px',border:'1px solid #ccc',borderRadius:'5px'},children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[translations[settings.language].overallHours,\":\"]}),\" \",week.totalHours,\" \",translations[settings.language].hours]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[translations[settings.language].workingtimedifference,\":\"]}),\" \",week.difference,\" \",translations[settings.language].hours]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[translations[settings.language].percentage,\":\"]}),\" \",week.percentage,\"%\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[translations[settings.language].feedback,\":\"]}),\" \",week.feedback]})]})]},index);})]})]});};export default WorkHoursDashboard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}